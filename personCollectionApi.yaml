openapi: 3.0.3
info:
  title: SOA Lab 1
  description: Вариант 8602. Алексей Волков & Сандов Кирилл.
  version: 1.0.0

tags:
  - name: Person API
  - name: Demography API

servers:
  - url: http://localhost:8080
    description: Dev-сервер

paths:
  /persons:
    get:
      tags:
        - Person API
      summary: Получить список людей
      description: |
        Возвращает список людей с поддержкой:
        - **Фильтрации** по одному или нескольким полям с операциями равенства и диапазона (<, >)
        - **Сортировки** по одному или нескольким полям
        - **Постраничного вывода** результатов

        ### Примеры использования фильтрации:
        - `/persons?height[gt]=180` — рост больше 180
        - `/persons?weight[lt]=90` — вес меньше 90
        - `/persons?name=John` — имя равно "John"
        - `/persons?height[gt]=170&weight[lt]=80&name=Alice` — комбинированная фильтрация

        ### Примеры сортировки:
        - `/persons?sort=name,asc&sort=height,desc`
        
        ### Пример комбинированного запроса (фильтрация + сортировка):
        - `/persons?height[gt]=170&weight[lt]=80&name=Alice&sort=name,asc&sort=height,desc`

      operationId: getPersons
      parameters:
        # Пагинация
        - name: page
          in: query
          description: Номер страницы (нумерация начинается с 0)
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0

        - name: size
          in: query
          description: Количество элементов на странице
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20

        # Сортировка
        - name: sort
          in: query
          description: |
            Параметры сортировки в формате: `поле,направление`.

            Можно указать несколько параметров `sort` для многоуровневой сортировки.

            **Доступные поля:**
            - `id`
            - `name`
            - `coordinates.x`
            - `coordinates.y`
            - `height`
            - `birthday`
            - `weight`
            - `nationality`
            - `location.x`
            - `location.y`
            - `location.name`

            **Направления:**
            - `asc` — по возрастанию
            - `desc` — по убыванию

            **Примеры:**
            - `sort=name,asc`
            - `sort=height,desc`
            - `sort=name,asc&sort=height,desc`
            - `sort=coordinates.x,desc&sort=location.name,asc`
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z.]+,(asc|desc)$'
          examples:
            single:
              summary: Одиночная сортировка
              value: ["name,asc"]
            multiple:
              summary: Множественная сортировка
              value: ["name,asc", "height,desc"]

        # Фильтрация (равенство и диапазон)
        - name: id
          in: query
          description: Фильтр по ID (равенство)
          schema:
            type: integer

        - name: id[lt]
          in: query
          description: Фильтр по ID (меньше)
          schema:
            type: integer

        - name: id[gt]
          in: query
          description: Фильтр по ID (больше)
          schema:
            type: integer

        - name: name
          in: query
          description: Фильтр по имени (равенство)
          schema:
            type: string

        - name: height
          in: query
          description: Фильтр по росту (равенство)
          schema:
            type: number

        - name: height[lt]
          in: query
          description: Фильтр по росту (меньше)
          schema:
            type: number

        - name: height[gt]
          in: query
          description: Фильтр по росту (больше)
          schema:
            type: number

        - name: weight
          in: query
          description: Фильтр по весу (равенство)
          schema:
            type: number

        - name: weight[lt]
          in: query
          description: Фильтр по весу (меньше)
          schema:
            type: number

        - name: weight[gt]
          in: query
          description: Фильтр по весу (больше)
          schema:
            type: number

        - name: nationality
          in: query
          description: Фильтр по национальности (равенство)
          schema:
            type: string
            enum:
              - RUSSIA
              - CHINA
              - INDIA
              - ITALY
              - SOUTH_KOREA

        - name: birthday
          in: query
          description: Фильтр по дате рождения (равенство, формат yyyy-MM-dd)
          schema:
            type: string
            format: date

        - name: birthday[lt]
          in: query
          description: Фильтр по дате рождения (раньше)
          schema:
            type: string
            format: date

        - name: birthday[gt]
          in: query
          description: Фильтр по дате рождения (позже)
          schema:
            type: string
            format: date

      responses:
        "200":
          description: Список людей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400":
          description: Неверные параметры запроса
        "500":
          description: Внутренняя ошибка сервера

    post:
      tags:
        - Person API
      summary: Добавить нового человека
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
      responses:
        "201":
          description: Созданный объект
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400": { description: Неверный формат запроса }
        "422": { description: Ошибка валидации }
        "500": { description: Внутренняя ошибка сервера }

  /persons/{id}:
    get:
      tags:
        - Person API
      summary: Получить человека по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Найденный человек
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400": { description: Неверный ID }
        "404": { description: Не найден }
        "500": { description: Внутренняя ошибка сервера }

    put:
      tags:
        - Person API
      summary: Обновить человека по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
      responses:
        "200":
          description: Обновлённый объект
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400": { description: Неверные данные запроса }
        "404": { description: Не найден }
        "422": { description: Ошибка валидации }
        "500": { description: Внутренняя ошибка сервера }

    delete:
      tags:
        - Person API
      summary: Удалить человека по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204": { description: Удалено }
        "400": { description: Неверный ID }
        "404": { description: Не найден }
        "500": { description: Внутренняя ошибка сервера }

  /persons/average-weight:
    get:
      tags:
        - Person API
      summary: Средний вес
      responses:
        "200":
          description: Среднее значение
          content:
            application/json:
              schema:
                type: number
                format: double
        "500": { description: Внутренняя ошибка сервера }

  /persons/count-by-location:
    get:
      tags:
        - Person API
      summary: Количество людей по location
      parameters:
        - name: x
          in: query
          schema:
            type: number
        - name: y
          in: query
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Количество найденных
          content:
            application/json:
              schema:
                type: integer
        "400": { description: Неверные параметры запроса }
        "500": { description: Внутренняя ошибка сервера }

  /persons/by-height:
    get:
      tags:
        - Person API
      summary: Люди выше заданного роста
      parameters:
        - name: minHeight
          in: query
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Список найденных людей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        "400": { description: minHeight обязателен и должен быть числом }
        "500": { description: Внутренняя ошибка сервера }

  /demography/hair-color/{hairColor}:
    get:
      tags:
        - Demography API
      summary: Количество людей по цвету волос
      parameters:
        - name: hairColor
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Количество людей
          content:
            application/json:
              schema:
                type: integer
        "400": { description: Неверный цвет волос }
        "500": { description: Внутренняя ошибка сервера }

  /demography/nationality/{nationality}/eye-color/{eyeColor}/percentage:
    get:
      tags:
        - Demography API
      summary: Доля людей по цвету глаз и национальности
      parameters:
        - name: nationality
          in: path
          required: true
          schema:
            type: string
            enum:
              - RUSSIA
              - CHINA
              - INDIA
              - ITALY
              - SOUTH_KOREA
        - name: eyeColor
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Процент людей
          content:
            application/json:
              schema:
                type: number
                format: double
        "400": { description: Неверные значения параметров }
        "500": { description: Внутренняя ошибка сервера }

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
        height:
          type: number
        birthday:
          type: string
          format: date
        weight:
          type: number
          nullable: true
        nationality:
          $ref: '#/components/schemas/Country'
        location:
          $ref: '#/components/schemas/Location'

    PersonCreateRequest:
      type: object
      required:
        - name
        - coordinates
        - height
        - birthday
        - nationality
        - location
      properties:
        name:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        height:
          type: number
        birthday:
          type: string
          format: date
        weight:
          type: number
          nullable: true
        nationality:
          $ref: '#/components/schemas/Country'
        location:
          $ref: '#/components/schemas/Location'

    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
        y:
          type: number

    Location:
      type: object
      required:
        - y
        - name
      properties:
        x:
          type: number
        y:
          type: integer
        name:
          type: string

    Country:
      type: string
      enum:
        - RUSSIA
        - CHINA
        - INDIA
        - ITALY
        - SOUTH_KOREA
