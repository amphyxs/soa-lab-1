openapi: 3.0.3
info:
  title: SOA Lab 1
  description: Вариант 8602. Алексей Волков & Сандов Кирилл.
  version: 1.0.0

tags:
  - name: Person API
  - name: Demography API

servers:
  - url: http://localhost:8080
    description: Dev-сервер

paths:
  /persons:
    get:
      tags:
        - Person API
      summary: Получить список всех людей
      description: Поддерживает сортировку, фильтрацию и пагинацию.
      parameters:
        - name: page
          in: query
          schema: { type: integer }
        - name: size
          in: query
          schema: { type: integer }
        - name: sort
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Список людей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      tags:
        - Person API
      summary: Добавить нового человека
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
      responses:
        "201":
          description: Созданный объект
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

  /persons/{id}:
    get:
      tags:
        - Person API
      summary: Получить человека по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Найденный человек
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "404": { description: Не найден }
    put:
      tags:
        - Person API
      summary: Обновить человека по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
      responses:
        "200":
          description: Обновлённый объект
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "404": { description: Не найден }
    delete:
      tags:
        - Person API
      summary: Удалить человека по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Удалено }
        "404": { description: Не найден }

  /persons/average-weight:
    get:
      tags:
        - Person API
      summary: Средний вес
      responses:
        "200":
          description: Среднее значение
          content:
            application/json:
              schema: { type: number, format: double }

  /persons/count-by-location:
    get:
      tags:
        - Person API
      summary: Количество людей по location
      parameters:
        - name: x
          in: query
          schema: { type: number }
        - name: y
          in: query
          schema: { type: integer }
        - name: name
          in: query
          schema: { type: string }
      responses:
        "200":
          description: Количество найденных
          content:
            application/json:
              schema: { type: integer }

  /persons/by-height:
    get:
      tags:
        - Person API
      summary: Люди выше заданного роста
      parameters:
        - name: minHeight
          in: query
          required: true
          schema: { type: number }
      responses:
        "200":
          description: Список найденных людей
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Person' }

  /demography/hair-color/{hairColor}:
    get:
      tags:
        - Demography API
      summary: Количество людей по цвету волос
      parameters:
        - name: hairColor
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Количество людей
          content:
            application/json:
              schema: { type: integer }

  /demography/nationality/{nationality}/eye-color/{eyeColor}/percentage:
    get:
      tags:
        - Demography API
      summary: Доля людей по цвету глаз и национальности
      parameters:
        - name: nationality
          in: path
          required: true
          schema:
            type: string
            enum: [ RUSSIA, CHINA, INDIA, ITALY, SOUTH_KOREA ]
        - name: eyeColor
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Процент людей
          content:
            application/json:
              schema: { type: number, format: double }

components:
  schemas:
    Person:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        coordinates: { $ref: '#/components/schemas/Coordinates' }
        creationDate: { type: string, format: date-time }
        height: { type: number }
        birthday: { type: string, format: date }
        weight: { type: number, nullable: true }
        nationality: { $ref: '#/components/schemas/Country' }
        location: { $ref: '#/components/schemas/Location' }

    PersonCreateRequest:
      type: object
      required: [name, coordinates, height, birthday, nationality, location]
      properties:
        name: { type: string }
        coordinates: { $ref: '#/components/schemas/Coordinates' }
        height: { type: number }
        birthday: { type: string, format: date }
        weight: { type: number, nullable: true }
        nationality: { $ref: '#/components/schemas/Country' }
        location: { $ref: '#/components/schemas/Location' }

    Coordinates:
      type: object
      required: [x, y]
      properties:
        x: { type: number }
        y: { type: number }

    Location:
      type: object
      required: [y, name]
      properties:
        x: { type: number }
        y: { type: integer }
        name: { type: string }

    Country:
      type: string
      enum: [RUSSIA, CHINA, INDIA, ITALY, SOUTH_KOREA]
